# This workflow process for block and unblock 
name: Block deployment to staging
run-name: ${{ github.event.inputs.blocking_tag }} deployment to staging

on:   
  push:  
  workflow_dispatch:
    inputs:
      blocking_tag:
        type: choice
        description: Block/Unblock workflows when deployment to staging 
        required: true
        default: Block
        options:
          - Block
          - Unblock
env:
  BLOCKING_TAG: ${{ github.event.inputs.blocking_tag }}
  
jobs:
  block-deployment-event:
    name: ${{ github.event.inputs.blocking_tag }} Deployment management
    runs-on: 3shape-ubuntu-latest
    env: 
      directory: "metadata/block"
      fileName: "blocked-deployment.json"
      event: "deployment to staging"
    steps:
      - name: Show Inputs
        shell: pwsh
        run: |
          Write-Host "blocking_tag: ${{ inputs.blocking_tag }}"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pull the latest changes
        shell: pwsh
        run: |
          Write-Host "Pull the latest changes from the repository..."
          git pull
      
      - name: Create directory
        shell: pwsh
        run: |
          # Create the directory for the block-deployment files of the branch that dispatched the workflow
          if (!(Test-Path ./${{ env.directory }} -PathType Container)) {
            New-Item -ItemType Directory -Path ./${{ env.directory }}
            Write-Host "Created directory: ./${{ env.directory }}"
          } 

      - name: Block ${{ env.event }}
        id: do-block
        if: ${{ env.BLOCKING_TAG == 'Block' }}
        shell: pwsh
        run: | 
          # Define the path for the block-deployment file
          $blockDeploymentFilePath = "./${{ env.directory }}/${{ env.fileName}}"

          if (!(Test-Path $blockDeploymentFilePath)) {
            $event_stamp = (Get-Date -Format 'MM/dd/yy HH:mm:ss')
            $content = @{
              inputs = @{
                event_stamp = "$event_stamp"
                status      = "${{ env.BLOCKING_TAG }}" 
              }
            }

            # Convert the content to JSON format
            $jsonContent = $content | ConvertTo-Json -Compress

            $jsonContent | Set-Content -Path $blockDeploymentFilePath
            Write-Host "Saved block-deployment to $blockDeploymentFilePath"
            $message = "`n The ${{ env.BLOCKING_TAG }} tag has been set"
          }
          else {
            $message = "`n You have already set the ${{ env.BLOCKING_TAG }} tag" 
          }
          Write-Output $message | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Unblock ${{ env.event }}
        id: do-unblock
        if: ${{ env.BLOCKING_TAG == 'Unblock' }}
        shell: pwsh
        run: |
          Write-Host "Unblocking ${{ env.event }}"
          Write-Host "Pull the latest changes from the repository..."

          $blockDeploymentFilePath = "./${{ env.directory }}/${{ env.fileName}}"

          # Check if the block-deployment file exists, then delete it
          if (Test-Path $blockDeploymentFilePath) {
            Remove-Item -Path $blockDeploymentFilePath
            $message = "`n The ${{ env.BLOCKING_TAG }} tag has been set"
          }
          else {
            $message = "`n You have already set ${{ env.BLOCKING_TAG }} tag"              
          } 
          Write-Output $message | Out-File -FilePath $Env:GITHUB_STEP_SUMMARY -Encoding utf8 -Append

      - name: Commit metadata changes 
        id: do-commit
        shell: pwsh
        run: |
          if (git status --porcelain) {
            git config user.name $env:GITHUB_ACTOR
            git config user.email "$env:GITHUB_ACTOR@users.noreply.github.com"
            
            git fetch
            git add --all
            git commit -m "${{ env.BLOCKING_TAG }} deployment to staging"

            for ($i = 0; $i -lt 4; $i++) {
              git push
              if ($?) { 
                Write-Host "Changes were successfully pushed"
                exit 0
              }
              Start-Sleep -Seconds (Get-Random -Maximum 10)
              git fetch
            }

            $output_info = "Pushing process is not successfully"
            Write-Host $outputInfo
             
          } else {
            Write-Host "No changes in metadata."
          }
          